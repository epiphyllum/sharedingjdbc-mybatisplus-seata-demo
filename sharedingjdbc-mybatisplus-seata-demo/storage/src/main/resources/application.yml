logging:
    level:
        com:
            robotbana: info
### Ribbon 配置
### 这里很重要
#    异常：Could not register branch into global session xid = status = Rollbacked（还有Rollbacking、AsyncCommitting等等二阶段状态） while expecting Begin
#    描述：分支事务注册时，全局事务状态需是一阶段状态begin，非begin不允许注册。属于seata框架层面正常的处理，用户可以从自身业务层面解决。
#    出现场景（可继续补充）
#
#    1. 分支事务是异步，全局事务无法感知它的执行进度，全局事务已进入二阶段，该异步分支才来注册
#    2. 服务a rpc 服务b超时（dubbo、feign等默认1秒超时），a上抛异常给tm，tm通知tc回滚，但是b还是收到了请求（网络延迟或rpc框架重试），然后去tc注册时发现全局事务已在回滚
#    3. tc感知全局事务超时(@GlobalTransactional(timeoutMills = 默认60秒))，主动变更状态并通知各分支事务回滚，此时有新的分支事务来注册
ribbon:
    # 连接超时
    ConnectTimeout: 2000
    # 响应超时  设置超时时间设置长一点。应为回滚需要时间
    ReadTimeout: 10000
server:
    port: 8182
spring:
    application:
        name: storage-server
    cloud:
        loadbalancer:
            ribbon:
                enabled: true
#        consul:
#            host: 127.0.0.1
#            port: 8500
        nacos:
            config:
                server-addr: 192.168.101.50:8848
                username: nacos
                password: nacos
            discovery:
                server-addr: 192.168.101.50:8848
                username: nacos
                password: nacos
#        discovery:
#            register: true
#            prefer-ip-address: true
#            health-check-path: /actuator/health
#            service-name: ${spring.application.name}
#            instance-id: ${spring.application.name}:${spring.cloud.client.ip-address}
#            health-check-interval: 5s
        alibaba:
            seata:
                tx-service-group: my_tx_group
    aop:  #使用CGLIB来实现AOP的时候
        proxy-target-class: true
    shardingsphere:
        datasource:
            names: ds0,ds1
            ds0:
                type: com.alibaba.druid.pool.DruidDataSource
                driver-class-name: com.mysql.jdbc.Driver
                username: root
                password: 123456
                jdbc-url: jdbc:mysql://192.168.101.24:3306/seata_storage_0?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=UTC
                url: jdbc:mysql://192.168.101.24:3306/seata_storage_0?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=UTC
                filters: stat,wall,log4j
                maxActive: 20
                initialSize: 1
                maxWait: 60000
                minIdle: 1
                timeBetweenEvictionRunsMillis: 60000
                minEvictableIdleTimeMillis: 300000
                validationQuery: select 'x'
                testWhileIdle: true
                testOnBorrow: false
                testOnReturn: false
                poolPreparedStatements: true
                maxOpenPreparedStatements: 20
                connection-properties: druid.stat.merggSql=ture;druid.stat.slowSqlMillis=5000
            ds1:
                type: com.alibaba.druid.pool.DruidDataSource
                driver-class-name: com.mysql.jdbc.Driver
                username: root
                password: 123456
                jdbc-url: jdbc:mysql://192.168.101.24:3306/seata_storage_1?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=UTC
                url: jdbc:mysql://192.168.101.24:3306/seata_storage_1?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=UTC
                filters: stat,wall,log4j
                maxActive: 20
                initialSize: 1
                maxWait: 60000
                minIdle: 1
                timeBetweenEvictionRunsMillis: 60000
                minEvictableIdleTimeMillis: 300000
                validationQuery: select 'x'
                testWhileIdle: true
                testOnBorrow: false
                testOnReturn: false
                poolPreparedStatements: true
                maxOpenPreparedStatements: 20
                connection-properties: druid.stat.merggSql=ture;druid.stat.slowSqlMillis=5000
        sharding:
            default-database-strategy:
                inline:
                    sharding-column: product_id
                    algorithm-expression: ds$->{product_id % 2}
            tables:
                storage:
                    actual-data-nodes: ds$->{0..1}.storage_$->{0..1}
                    table-strategy:
                        inline:
                            sharding-column: product_id
                            algorithm-expression: storage_$->{product_id % 2}
                    key-generator:
                        column: id
                        type: SNOWFLAKE
                        props:
                            worker.id: 123


        props:
            sql:
                show: true

mybatis-plus:
    #  datasource: dataSource
    mapper-locations: classpath:/mapper/**/*.xml
    #实体扫描，多个package用逗号或者分号分隔
    type-aliases-package:  com.robotbana.demo.shardingjdbc.mybatisplus.entity
    #typeEnumsPackage: com.baomidou.springboot.entity.enums
    global-config:
        #主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID", 4:"该类型为未设置主键类型", 5:"字符串全局唯一ID";
        id-type: 2
        #字段策略 0:"忽略判断",1:"非 NULL 判断"),2:"非空判断"
        field-strategy: 1
        #驼峰下划线转换
        db-column-underline: true
        #刷新mapper 调试神器
        refresh-mapper: true
        #数据库大写下划线转换
        #capital-mode: true
        #逻辑删除配置（下面3个配置）
        logic-delete-value: 0
        logic-not-delete-value: 1
        # SQL 解析缓存，开启后多租户 @SqlParser 注解生效
        sql-parser-cache: true
    configuration:
        map-underscore-to-camel-case: true
        cache-enabled: false
    configuration-properties:
        dbType: mysql #设置全局属性用于控制数据库的类型